运行C++文件：
	生成编译后的可执行文件
		g++ -o test test.cpp -std=c++11
	运行可执行文件	
		./test

使用gdb断点调试：
	类似pdb 断点调试
	gdb ./test
	添加断点：
		b 行数 		例如：b 5
	
vscode调试C++文件:
    Ctrl+Shift+p 输入Cmake: Quick Ctart:
    GCC :9.3.0
    输入工作空间名字
    选择包或者执行文件
    注释 
        # include(CTest)
        # enable_testing()
        # set(CPACK_PROJECT_NAME ${PROJECT_NAME})
        # set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
        # include(CPack)
    add_executable：        
        add_executable(yunsuan yunsuan.cpp) 添加需要生成的调试文件
        vscode下方选择yunsuan
        Ctrl+F5 点击yunsuan 开始调试

输入
    int input = 0;
    cin >> input;
输出
    cout << "input: =" << input <<endl;
    printf("input:",input)

sizeof
    判断一个对象的内存大小
    int month = 12;
    printf("sizeof month is: ",sizeof(month))
    输出结果:sizeof month is: 4

与或非
    && 与
    || 或
    !  非

三元运算符
    python的三元运算符表示
        result = "A" if score>90 else "B"
    C++的三元运算符表示
        char result = score>90 ? "A":"B";

::
    域操作符,表明变量或者函数的作用域有点类似与python的.

字符串的操作:
    用+做拼接
    用[]下标查找
    用str.substr(0 , 4)截取
    用str.find("this")查找
    使用str.length()获取长度

数组
    int arr [5]; //未定义随机生成内容
    数组一旦声明后长度是不可变的
    获取数组的长度
        int length = sizeof(arr)/sizeof(arr[0]);
    遍历数组
    1:
    for(int s=0;s<lenth;s++)
        {
            printf("\n score%d=%d",s,scores[s]);
        }
    2:
    for(int s : scores)
        {
            printf("\n score%d",s);
        }

array:
	include <array>	
	用来代替数组,可以用来遍历，查询，有下标

vector
    动态数组,数组的长度是不可变的,vector的长度是可变的
    需要#include <vecotr>和using namespace std;
    vector.push_back(80) 添加元素
    vector.size() 获取vector的长度

template 泛型：
	template<typename T> 只函数T返回的类型可以通过<>传输进去

C++内存分布：
	1. 栈：函数在运行时候开辟的内存，函数结束自动销毁
	2. 堆：new分配，delete销毁，自己声明自己销毁
	3. 全局区(静态区)： (static)全局变量和静态变量储存区，程序结束后由系统释放
	4. 常量储存去： 常量储存

static：
	只初始化一次，并且声明在全局区
	static修饰的变量和方法，可以直接用（类名.变量/类名.方法名）直接引用，不需要new一个类。


include：
	include ""和 include<>的区别
	include ""查找的是当前源文件所在的目录，如果没有会的话，再去检索源文件所在目录
	include <>查找的是标准库头文件所在目录，如果没有也不会查找源文件所在目录，直接报错

new:
	在堆中开辟内存，

define:
	由编译器执行，一般用于跨平台使用，在不同的编译环境执行不同的操作，可以在编译的时候传入参数-D

typedef:
	类似与as，将一个模板重新命名,后续版本使用using代替



	

