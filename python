
struct :
		pack和unpack
		发送端使用pack打包       i = 6
        	    			f = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7]
        	    			s = struct.pack('i5sfffffff',i,com,f[0],f[1],f[2],f[3],f[4],f[5],f[6])
		接受端使用       data = conn.recv(1024)
        	    		res_unpack = struct.unpack('i5sfffffff',data)
	
marshmallow: 	
		用于将复杂的数据类型（例如对象）与本机的python数据类型之间进行转换
		`验证输入数据
		`将输入数据饭序列化成为应用程序级对象
		`将应用程序级对象序列化为原始python类型，然后可以将序列化的对象呈现为标准格式，例如json，以用于HTTP API
	
epoll:
		对select方法进行了封装
		用于监控socket发生事件
		例如监控可读事件，可写事件，错误事件，断开事件的发生
		https://blog.csdn.net/wuchuanpingstone/article/details/82964256

thread:
		t1 = threading.Thread(target=["需要启动的函数名字"],args=["函数需要传的参数"])
				创建
		t1.setDaemon(True)
				把所有的子线程都变成了主线程的守护线程，主线程不等待该守护线程的执行完再去关闭
		t1.start()
				开启
		t1.join()
				优先将多线程运行完了之后才会运行后面的程序
Queue：
		from Queue import Queue,LifoQueue,PriorityQueue
						# Queue是指先入先出
						# LifoQueue是指后入先出
						# PriorityQueue优先级队列
		q=Queue(maxsize=5)		# 先进先出队列
		lq=LifoQueue(maxsize=6)		# 后进先出队列
		pq=PriorityQueue(maxsize=5)	# 优先级队列
		q.qsize() 返回队列的大小
		q.empty() 如果队列为空，返回True,反之False
		q.full() 如果队列满了，返回True,反之False，Queue.full 与 maxsize 大小对应
		q.get([block[, timeout]])获取队列，timeout等待时间
		q.get_nowait() 相当于Queue.get(False)，非阻塞方法
		q.put(item) 写入队列，timeout等待时间
		q.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号。每个get()调用得到一个任务，
				接下来task_done()调用告诉队列该任务已经处理完毕。
		Queue.join() 实际上意味着等到队列为空，再执行别的操作

		
requests.request():
		res = requests.request('GET', url, **kwargs)	#阻塞式返回，一直阻塞到有返回值或者timeout选项
		print(res) 
flask():
		from flask import request
		res= request.get_json()
	
Marshmallow:
	序列化和反序列化操作

	序列化：
		使用Schema中的dump()方法实现 obj->dict，
		使用Schema中的dumps()方法实现 obj->string，
		可以使用only和exclude过滤输出
	反序列化：
		使用Schema中的load()方法实现 dict->obj，
		使用Schema中的load()方法实现 string->obj，

json:
	dump():
		json文件写入
	load():
		json文件读取
	dumps():
		将字典类型转化为json类型
	loads():
		将json类型转化为字典类型

copy:
	copy.copy():
		还是指向之前的对象
	copy.deepcopy():
		copy出一个新的对象

map():
	map(func,msg)
	将msg中所有的数传入func中，得到返回值
	def square(x) :            # 计算平方数
	...     return x ** 2
	...
	>>> map(square, [1,2,3,4,5])   # 计算列表各个元素的平方
	[1, 4, 9, 16, 25]

round():
	round(3.1415926,1)
	四舍五如小数点后面1位数

getattr():
	getattr(object, name[, default])
	>>>class A(object):
        bar = 1 
	>>> a = A()
	>>> getattr(a, 'bar')        # 获取属性 bar 值
	1
	>>> getattr(a, 'bar2')       # 属性 bar2 不存在，触发异常
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	AttributeError: 'A' object has no attribute 'bar2'
	>>> getattr(a, 'bar2', 3)    # 属性 bar2 不存在，但设置了默认值
	3
	>>>

importlib.import_module():
	params = importlib.import_module('b.c.c') #绝对导入
	params_ = importlib.import_module('.c.c',package='b') #相对导入
	# 对象中取出需要的对象
	params.args #取出变量
	params.C  #取出class C
	params.C.c  #取出class C 中的c 方法




如何分别实现TCP与UDP ?  socket.socket()创建的是基于哪一种协议的socket对象？
	

TCP/IP协议的三次握手与四次挥手分别封装在socket对象的哪两个方法中？


conn.recv(1024)时如果缓存区数据长度不超过1024会如何？
	如果大于1024返回1024,小于1024,是多少就返回多少

当使用TCP/IP协议的socket链接断开时， 服务端与客户端分别调用recv和send的结果是什么？(服务端/客户端关闭， 选择服务端/客户端做后续测试， 测试recv/send, 排列组合一共8种情形需要分析)
	

在某种场景下， 使用TCP/IP协议的连接发送消息时,遵守的协议之一是用”$$”来分割两段消息， 如果用conn.recv(2)来接收消息， 请问如何保证在处理消息时（比如将消息写入文件中， 每条消息占一行）不重复， 不遗漏，不残缺， 并且及时？


什么是长连接什么是短连接？


需要长连接时， 什么条件下需要考虑断线重连， 什么时候不需要考虑？


如何实现TCP/IP协议服务器同时与多个客户端通信？
	多线程或者socketserver












































