piece_picking框架相关：
	http_app中建立flask框架，获取request请求，然后建立一个socket将请求信息回传并且告诉前端，前端拿到请求后再发送给System_manager，
	拿到一个new_batch后先调用前端read。前端再调用system_manager.read()核对batch信息。核对信息成功后会将batch放入队列中（Queue先入先出类型队列）。
	然后等待start按钮，runbatch

	数据库安装相关：
		1.sudo apt-get install mysql-client
		2.sudo apt-get install mysql-server
		3.	->输入密码：xyz123456
		4. 运行数据库：mysql -u root -p xyz123456





ros相关：
	.bashrc文件（隐藏文件）在根目录下，每打开一个terminal自动加载的一些参数和配置
	.bashrc文件下添加$CODE_BASE=/home/xyz/xyz_app/ 环境变量


git :
	git commit -m "descript"
	git push origin <分支名>




linux相关:
	systemctl:
		systemctl enable：设置下次开机时，后面接的 unit 会被启动。
		systemctl disable：设置下次开机时，后面接的 unit 不会被启动。
		systemctl is-enable：开机时有没有默认要启用这个 unit
	supervisor：
		安装supervisor，sudo apt-get install supervisor
		找一个xyz_autostart.server文件 拷贝到/lib/systemd/system/目录下  sudo cp /path/to/xyz_autostart.service /lib/systemd/system
		启动xyz_autostart服务
			先关闭原supervisor的自启
				$ sudo systemctl is-enabled supervisor.service
				$ sudo systemctl disable supervisor.service
				$ sudo systemctl is-enabled supervisor.service
				显示disabled表示已经成功取消自启
			把xyz_autostart.service设为自启
				sudo systemctl enable xyz_autostart.service
				sudo systemctl is-enabled xyz_autostart.service
				显示enabled表示已经成功设为自启
			查看supervisor的状态
				ps -ef | grep supervisord访问127.0.0.1:9001
				登录密码在supervisord.conf中,看每个节点是否能启动
		
	vim：
		shift+G 直接跳到最后一行
		有时候弹出提示框，需要输入-R覆盖


python:
	struct :
		pack和unpack
		发送端使用pack打包       i = 6
        	    			f = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7]
        	    			s = struct.pack('i5sfffffff',i,com,f[0],f[1],f[2],f[3],f[4],f[5],f[6])
		接受端使用       data = conn.recv(1024)
        	    		res_unpack = struct.unpack('i5sfffffff',data)
	
	marshmallow: 	
		用于将复杂的数据类型（例如对象）与本机的python数据类型之间进行转换
		`验证输入数据
		`将输入数据饭序列化成为应用程序级对象
		`将应用程序级对象序列化为原始python类型，然后可以将序列化的对象呈现为标准格式，例如json，以用于HTTP API
	
	epoll:
		对select方法进行了封装
		用于监控socket发生事件
		例如监控可读事件，可写事件，错误事件，断开事件的发生
		https://blog.csdn.net/wuchuanpingstone/article/details/82964256

	thread:
		thread.join()
				优先将多线程运行完了之后才会运行后面的程序
	Queue：
		from Queue import Queue,LifoQueue,PriorityQueue
						# Queue是指先入先出
						# LifoQueue是指后入先出
						# PriorityQueue优先级队列
		q=Queue(maxsize=5)		# 先进先出队列
		lq=LifoQueue(maxsize=6)		# 后进先出队列
		pq=PriorityQueue(maxsize=5)	# 优先级队列
		q.qsize() 返回队列的大小
		q.empty() 如果队列为空，返回True,反之False
		q.full() 如果队列满了，返回True,反之False，Queue.full 与 maxsize 大小对应
		q.get([block[, timeout]])获取队列，timeout等待时间
		q.get_nowait() 相当于Queue.get(False)，非阻塞方法
		q.put(item) 写入队列，timeout等待时间
		q.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号。每个get()调用得到一个任务，接下来task_done()调用告诉队列该任务已经处理完毕。
		Queue.join() 实际上意味着等到队列为空，再执行别的操作

		
	requests.request():
		res = requests.request('GET', url, **kwargs)
		print(res) 阻塞式返回，一直阻塞到有返回值或者timeout选项，
	
		

